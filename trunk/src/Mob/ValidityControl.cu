/*******************************************************************************

  Eurecom Cunetsim2
  Copyright(c) 2011 - 2012 Eurecom

  This program is free software; you can redistribute it and/or modify it
  under the terms and conditions of the GNU General Public License,
  version 2, as published by the Free Software Foundation.

  This program is distributed in the hope it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  more details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

  The full GNU General Public License is included in this distribution in
  the file called "COPYING".

  Contact Information
  Cunetsim Admin: cunetsim@eurecom.fr
  Cunetsim Tech : cunetsim_tech@eurecom.fr
  Forums       : TODO
  Address      : Eurecom, 2229, route des crÃªtes, 06560 Valbonne Sophia Antipolis, France

*******************************************************************************/

/**
 * \file ValidityControl.cu
 * \brief Functions necessary to prepare scripts that may be used to generate graphs (substitutes the live simulation display when
 * the user would like to follow the evolution of a great number of nodes)
 * \author Bilel BR
 * \version 0.0.2
 * \date Nov 8, 2011
 */

#ifndef STRUCTURES_H_
#define STRUCTURES_H_
#include "../structures.h"
#endif /* STRUCTURES_H_ */


__host__ void Print_position(struct Geo *G, int N)
{
	int i;
	printf("digraph TrafficLights {graph [ fontname = \"Helvetica-Oblique\",fontsize = 36, label = \"Object Oriented Graphs,15/11/2011\" ];\r");
	for(i=0;i<N;i++)
	{
		//printf("node [shape=circle,pos=\"%d,%d,!\",id=%d]; %d;\n\r",G[i].p.x,G[i].p.y,i,i);
		if(i<17)
		printf("%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x00000\",pos=\"%d,%d('!')\",id=%d];\r",(i),i,G[i].p.x,G[i].p.y,(i));
		else
		{
			if(i<257)
				printf("%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x0000\",pos=\"%d,%d('!')\",id=%d];\r",(i),i,G[i].p.x,G[i].p.y,(i));
			else{
				if(i<4080)
					printf("%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x000\",pos=\"%d,%d('!')\",id=%d];\r",(i),i,G[i].p.x,G[i].p.y,(i));
				else
					printf("%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x00\",pos=\"%d,%d('!')\",id=%d];\r",(i),i,G[i].p.x,G[i].p.y,(i));

			}
		}
	}
	printf("}");
}

 /**
 * \fn __host__ void Print_connectivity(struct Geo *geo, int node_number, int suffix)
 * \brief generates a script that is itself a graph generator
 *
 * \param geo pointer to the space data
 * \param node_number is the number of nodes in the simulation
 * \param suffix to add to the end of the filename of the script generated by this function
 * \return void
 */
__host__ void Print_connectivity(struct Geo *geo, int node_number, int suffix)
{
	FILE *fileptr;
	char *filename;
	filename=(char *)malloc(30*sizeof(char));
	sprintf(filename,"graphe%d.txt",suffix);
	fileptr=fopen(filename,"w");
	int i,j;
	fprintf(fileptr,"digraph TrafficLights {graph [ fontname = \"Helvetica-Oblique\",fontsize = 36, label = \"connectivity,15/11/2011\" ];\n");
	for(i=0;i<node_number;i++)
	{
		if(i<17)
			fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.02,width=0.02,color=\"#%x00000\",pos=\"%d,%d('!')\",id=%d];\n",(i),i, geo[i].p.x,geo[i].p.y,(i));
		else
		{
			if(i<257)
				fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.02,width=0.02,color=\"#%x0000\",pos=\"%d,%d('!')\",id=%d];\n",(i),i,geo[i].p.x,geo[i].p.y,(i));
			else{
				if(i<4080)
					fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.02,width=0.02,color=\"#%x000\",pos=\"%d,%d('!')\",id=%d];\n",(i),i,geo[i].p.x,geo[i].p.y,(i));
				else
					fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.02,width=0.02,color=\"#%x00\",pos=\"%d,%d('!')\",id=%d];\n",(i),i,geo[i].p.x,geo[i].p.y,(i));

			}
		}
	
		for(j=0;j<geo[i].neighbor_number;j++)
		{
			fprintf(fileptr,"%d ->%d[dir=\"none\"];\n",i,geo[i].neighbor_vector[j],i);
		}
	}
	fprintf(fileptr,"}");
	fclose(fileptr);
}
/******************************************************/

__host__ void Print_propagation(struct Geo *G, struct Buffer *Buff,int t1,int t2, int N)
{
	FILE *fileptr;
	char *filename;
	filename=(char *)malloc(30*sizeof(char));
	sprintf(filename,"%d00%d.gv",t1,t2);
	fileptr=fopen(filename,"w");
	int i,j;
	fprintf(fileptr,"digraph TrafficLights {graph [ fontname = \"Helvetica-Oblique\",fontsize = 36, label = \"propagation information,15/11/2011\" ];\r");

	for(i=0;i<N;i++)
	{
		if(Buff[i].write_index>0)
		{
			if(Buff[i].element[Buff[i].read_index].header[0]==250)
		fprintf(fileptr,"%d [shape=circle,height=0.02,width=0.02,color = \"#%x%x%x\",style = filled,pos=\"%d,%d('!')\",id=%d];\r"\
				,i,9,Buff[i].element[Buff[i].read_index].header[1],\
				Buff[i].element[Buff[i].read_index].header[2],G[i].p.x,G[i].p.y,(i));
			else{
				fprintf(fileptr,"%d [shape=circle,height=0.02,width=0.02,color = \"#%x%x%x\",style = filled,pos=\"%d,%d('!')\",id=%d];\r"\
								,i,Buff[i].element[Buff[i].read_index].header[0],Buff[i].element[Buff[i].read_index].header[1],\
								Buff[i].element[Buff[i].read_index].header[2],G[i].p.x,G[i].p.y,(i));

			}
		}
		else
		{
		fprintf(fileptr,"%d [shape=circle,height=0.02,width=0.02,color=black,pos=\"%d,%d('!')\",id=%d];\r",i,G[i].p.x,G[i].p.y,(i));
		}
		for(j=0;j<G[i].neighbor_number;j++)
					{
						fprintf(fileptr,"%d ->%d[dir=\"none\"];\r",i,G[i].neighbor_vector[j],i);
					}

	}
	fprintf(fileptr,"}");
fclose(fileptr);

}
/*************************************************/
__host__ void Printmobility(struct Geo *G,int node, int ii, int j)
{

	if (ii==0)printf("digraph alpha{\r");
		if((ii%20))
		printf("%d [label=\"\",shape=circle,height=0.12,width=0.12,fontsize=1,pos=\"%d,%d('!')\",id=%d];\r",(node+ii),G[node].p.x,G[node].p.y,(node+ii));
		else
			printf("%d [shape=circle,height=0.12,width=0.12,pos=\"%d,%d('!')\",id=%d];\r",(node+ii),G[node].p.x,G[node].p.y,(node+ii));
					//else
		if(ii>0)
			printf("%d -> %d;\r",node+ii-1,node+ii);


	if(ii==(j-1))printf("}");
}


__host__ void Print_trajectory(struct Geo *G, int ii, int j, int N)
{
int i;
if (ii==0)printf("digraph alpha{\r");
for(i=0;i<N;i+=16)
{
	//un noeud du gprahe sera construit par la concatenation de id noeud et iteration en hexa
	if(i<17)
	{
	printf("%d0000%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x00000\",pos=\"%d,%d('!')\",id=%d];\r",i,ii,i,G[i].p.x,G[i].p.y,(i));
	if(ii>0)	printf("%d0000%d -> %d0000%d [dir=\"none\",color=\"#%x00000\"];\r",i,(ii-1),i,ii,i);
	}
	else
	{
		if(i<257)
		{
			printf("%d0000%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x0000\",pos=\"%d,%d('!')\",id=%d];\r",i,ii,i,G[i].p.x,G[i].p.y,(i));
			if(ii>0)	printf("%d0000%d -> %d0000%d [dir=\"none\",color=\"#%x0000\"];\r",i,(ii-1),i,ii,i);
		}
			else{
			if(i<4080)
			{
				printf("%d0000%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x000\",pos=\"%d,%d('!')\",id=%d];\r",i,ii,i,G[i].p.x,G[i].p.y,(i));
				if(ii>0)	printf("%d0000%d -> %d0000%d [dir=\"none\",color=\"#%x000\"];\r",i,(ii-1),i,ii,i);
			}
				else
				{
				printf("%d0000%d [label=\"\",shape=circle,height=0.02,width=0.02,fontsize=1,color=\"#%x00\",pos=\"%d,%d('!')\",id=%d];\r",i,ii,i,G[i].p.x,G[i].p.y,(i));
				if(ii>0)	printf("%d0000%d -> %d0000%d [dir=\"none\",color=\"#%x00\"];\r",i,(ii-1),i,ii,i);
				}

		}
	}
		//if(ii>0)	printf("%d0000%d -> %d0000%d [dir=\"none\"];\r",i,(ii-1),i,ii);
}
if(ii==(j-1))printf("}");
}
__host__ void Print_cluster(struct Geo *G,struct Cluster *cluster, int t1,int t2, int N)
{
	FILE *fileptr;
	char *filename;
	filename=(char *)malloc(30*sizeof(char));
	sprintf(filename,"%dcluster%d.gv",t1,t2);
	fileptr=fopen(filename,"w");
	int i,j;
	fprintf(fileptr,"digraph TrafficLights {graph [ fontname = \"Helvetica-Oblique\",fontsize = 36, label = \"cluster graph,15/11/2011\" ];\r");

	for(i=0;i<N;i++)
	{
	switch(cluster[i].noderole)
	{
	case CH:
	fprintf(fileptr,"%d [shape=circle,height=0.12,width=0.12,fontsize=8,color=red,pos=\"%d,%d('!')\",id=%d];\r",i,G[i].p.x,G[i].p.y,(i));
	break;
	case FR:
	fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.12,width=0.12,fontsize=1,color=black,pos=\"%d,%d('!')\",id=%d];\r",i,G[i].p.x,G[i].p.y,(i));
	break;
	case ND:
	fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.12,width=0.12,fontsize=1,color=green,pos=\"%d,%d('!')\",id=%d];\r",i,G[i].p.x,G[i].p.y,(i));
	
	break;
	case RE:
	fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.12,width=0.12,fontsize=1,color=blue,pos=\"%d,%d('!')\",id=%d];\r",i,G[i].p.x,G[i].p.y,(i));
	break;
	case GW:
	fprintf(fileptr,"%d [label=\"\",shape=circle,height=0.12,width=0.12,fontsize=1,color=yellow,pos=\"%d,%d('!')\",id=%d];\r",i,G[i].p.x,G[i].p.y,(i));
	break;
	default:
	break;
	}			

		for(j=0;j<G[i].neighbor_number;j++)
					{
					if(G[i].neighbor_vector[j]==cluster[i].MasterId)	
					fprintf(fileptr,"%d ->%d;\r",i,G[i].neighbor_vector[j]);
					}

	}
	fprintf(fileptr,"}");
fclose(fileptr);

}

